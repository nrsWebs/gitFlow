#!/bin/bash
GIT='git --git-dir='$PWD'/.git'

# BRANCH
MASTER='master'
DEVELOP='develop'
STG='stg'

# -----------
# FEATURE
# -----------
start.feature() {
    $GIT checkout "$DEVELOP"
    $GIT pull origin "$DEVELOP"
    pullConflict
    $GIT checkout -b "$1"
}

end.feature() {
    $GIT checkout "$1"
    read -p $'\e[31mIndicate the tag (task code):\e[0m ' tagname
    $GIT tag "$tagname"
    $GIT checkout "$DEVELOP"
    $GIT pull origin "$DEVELOP"
    pullConflict
    echo $'\e[33m---------------MERGE---------------\e[0m '
    $GIT merge "$1"
    echo $'\e[33m-----------------------------------\e[0m '

     # PUSH
    read -p $'\e[31mMerge OK?\e[0m ' answer
    echo    # (opcional) mover a una nueva línea
    if [[ "$answer" =~ ^[Yy]$ ]]; then
        $GIT push origin "$DEVELOP"
    fi
}

# -----------
# HOTFIX
# -----------
start.hotfix() {
    $GIT checkout "$MASTER"
    $GIT pull origin "$MASTER"
    pullConflict
    $GIT checkout -b "$1"
}

end.hotfix() {
    read -p $'\e[31mIndicate the tag (task code):\e[0m ' tagname
    $GIT tag "$tagname"

    # MASTER
    $GIT checkout "$MASTER"
    $GIT pull origin "$MASTER"
    pullConflict
    echo $'\e[33m---------------MERGE---------------\e[0m '
    $GIT merge "$1"
    echo $'\e[33m-----------------------------------\e[0m '

    # PUSH
    read -p $'\e[31mMerge OK?\e[0m ' answer
    echo    # (optional) move to a new line
    if [[ "$answer" =~ ^[Yy]$ ]]; then
        $GIT push origin "$MASTER"
    fi

    # DEVELOP
    $GIT checkout "$DEVELOP"
    $GIT pull origin "$DEVELOP"
    pullConflict
    echo $'\e[33m---------------MERGE---------------\e[0m '
    $GIT merge "$1"
    echo $'\e[33m-----------------------------------\e[0m '

    # PUSH
    read -p $'\e[31mMerge OK?\e[0m ' answer
    echo    # (optional) move to a new line
    if [[ "$answer" =~ ^[Yy]$ ]]; then
        $GIT push origin "$DEVELOP"
    fi
}

# -----------
# PRE
# -----------

deploy.pre() {
    $GIT checkout "$STG"
    $GIT pull origin "$STG"
    pullConflict
    echo $'\e[33m---------------MERGE---------------\e[0m '
    $GIT merge "$1"
    echo $'\e[33m-----------------------------------\e[0m '

    # PUSH
    read -p $'\e[31mMerge OK?\e[0m ' answer
    echo    # (opcional) mover a una nueva línea
    if [[ "$answer" =~ ^[Yy]$ ]]; then
        $GIT push origin "$STG"
    fi
}

# -----------
# PRO
# -----------
deploy.pro() {
    # UPDATE DEVELOP & MERGE
    $GIT checkout "$DEVELOP"
    $GIT pull origin "$DEVELOP"
    pullConflict
    # UPDATE MASTER
    read -p $'\e[31mUpdate '"$MASTER"$'?\e[0m ' answer
    echo    # (optional) move to a new line
    if [[ "$answer" =~ ^[Yy]$ ]]; then
        $GIT fetch -a
        $GIT checkout "$MASTER"
        $GIT pull origin "$MASTER"
        pullConflict
        echo $'\e[33m---------------MERGE---------------\e[0m '
        $GIT merge "$1"
        echo $'\e[33m-----------------------------------\e[0m '
        # $GIT rebase -i "$DEVELOP"

        # PUSH
        read -p $'\e[31mMerge OK?\e[0m ' answer
        echo    # (optional) move to a new line
        if [[ "$answer" =~ ^[Yy]$ ]]; then
            $GIT push origin "$MASTER"
        else 
            echo $'\e[34mResuelve los conflictos\e[0m '
            exit 1
        fi
    else 
        exit 1
    fi

    read -p $'\e[31mDelete task branch?\e[0m ' answer
    echo    # (optional) move to a new line
    if [[ "$answer" =~ ^[Yy]$ ]]; then
        $GIT branch -D "$1"
    fi
}


# -----------

pullConflict() {
    # Verificar si hay conflictos después del pull
    if $GIT diff --name-only --diff-filter=U | grep -q .; then
        echo -e "\e[34m¡Conflictos detectados! Resuélvalos antes de continuar.\e[0m"
        exit 1
    else
        echo -e "\e[34mExtracción completada exitosamente, no se encontraron conflictos.\e[0m"
    fi
}

"$@"
